package selenium.tests.day17_webTables2;import org.openqa.selenium.By;import org.openqa.selenium.WebElement;import org.testng.Assert;import org.testng.annotations.Test;import selenium.utilities.TestBase;import java.util.*;public class WebTableTests extends TestBase {    public int getCountOfRows(){        return driver.findElements(By.cssSelector("#table1 tr")).size();    }    public int getCountOfRows(By by){        return driver.findElements(by).size();    }    @Test    public void countOfRowsTest1(){        Assert.assertEquals(getCountOfRows(), 5, "Number of rows does not match");    }    @Test    public void countOfRowsTest2(){        Assert.assertEquals(getCountOfRows(By.xpath("//table[1]//tr")), 5, "Number of rows does not match");    }    public int getCountOfColumns(){        return driver.findElements(By.cssSelector("#table1 th")).size();    }    public int getCountOfColumns(By by){        return driver.findElements(by).size();    }    @Test    public void countOfColumnsTest1(){        Assert.assertEquals(getCountOfColumns(), 6, "Number of columns does not match");     }    @Test    public void countOfColumnsTest2(){        Assert.assertEquals(getCountOfColumns(By.xpath("//table[1]//th")), 6, "Number of columns does not match");    }    public int[] getTableSize(){        int [] size = {getCountOfRows(), getCountOfColumns()};        return size;    }    public int[] getTableSize(By rowLocator, By columnLocator){        int [] size = {getCountOfRows(rowLocator), getCountOfColumns(columnLocator)};        return size;    }    @Test    public void tableSizeTest1(){        int [] expectedSize = {5,6};        int [] actualSize = getTableSize();        Assert.assertEquals(actualSize, expectedSize, "Table size does not match");    }    @Test    public void tableSizeTest2(){        int [] expectedSize = {5,6};        int [] actualSize = getTableSize(By.xpath("//table[1]//tr"), By.xpath("//table[1]//th"));        Assert.assertEquals(actualSize, expectedSize, "Table size does not match");    }    public List<WebElement> getHeaders(){        return driver.findElements(By.cssSelector("#table1 th"));    }    public List<String> getHeadersText(){        List<String> headers = new ArrayList<>();        for(WebElement tableHeader : getHeaders()){            headers.add(tableHeader.getText());        }        return headers;    }    @Test    public void getHeadersTest(){        List<String> expectedColumnNames = Arrays.asList("Last Name", "First Name" , "Email" , "Due", "Web Site", "Action");        Assert.assertEquals(getHeadersText(), expectedColumnNames);    }    @Test    public void sortColumnTest(){        String columnName = "First Name";        driver.findElement(By.xpath("//table[1]//th//span[text()='"+columnName+"']")).click();        List<String> sorted = new ArrayList<>();        sorted.addAll(getColumnData(columnName));        Collections.sort(sorted);        Assert.assertEquals(getColumnData(columnName), sorted);    }    public List<String> getColumnData(String columnName){        int columnNumber= 0;        for(int i =0; i< getCountOfColumns(); i++){            if(columnName.equals(getHeadersText().get(i))){                columnNumber = i+1;            }        }        String locatorForColumn = "//table[1]//tbody//tr//td["+columnNumber+"]";        List<WebElement> columnCollectioOfWebElements = driver.findElements(By.xpath(locatorForColumn));        List<String> columnCollectionOfText = new ArrayList<>();        for(WebElement element : columnCollectioOfWebElements){            columnCollectionOfText.add(element.getText());        }        return columnCollectionOfText;    }}